
Phase 3 (Sim03) – Batch Program Simulator with Memory Management and CPU Scheduling (Tentative – for reference)
DESCRIPTION
This phase will offer you the opportunity to learn about memory management by creating your own software Memory Management Unit (MMU). You will also be extending the batch processing operations by implementing two different CPU scheduling strategies. The simulator must conduct all of the required operations of the previous (Sim02) simulator, with the addition of the following specifications:
- the simulator must now be configurable for either First Come First Served – Non preemptive (FCFS-N) or Shortest Job First – Non-preemptive (SJF-N). This means that if FCFS-N is shown in the configuration file, the simulator will progress through the processes as they were found in the meta-data file. However, if SJF-N is shown in the configuration file, the simulator will progress through the processes in such a way that the jobs are run in order by their total operation times from shortest operation times to longest operation times. 
- Note that this does not mean the shortest number of operations or cycles; the actual running times for all operations must be calculated, compared, and displayed when the process is placed into the RUNNING state. Also note that if two or more processes have the exact same running times, they are to be scheduled as FCFS. This is an unlikely scenario but must be considered and managed. Finally, note that the metadata/processes must be loaded and numbered in the order they are provided, and from there, they may be scheduled as specified. Do not reorder the processes to satisfy the SJF scheduling.
- Also note that it is not permitted to create separate simulation operations for the separate scheduling. There must be only one simulation master loop that calls for and uses the appropriate scheduling strategy
- the simulator must continue to use a POSIX thread to manage the cycle time for all I/O operations. This is an option but not a requirement for the run operations which must also still be simulated using the clock times as in Sim02. It also does not apply to the memory management operations which will be handled as specified in the next paragraphs. Note that students are still required to create their own timer threads; no previously created threads such as sleep, usleep, nanosleep, etc. may be used. For purposes of this assignment, the simulator still does not support a multi-tasking (multi-programming) environment. For that reason, the simulator must still wait for each run and I/O operation to complete before moving on to the next operation command.
- the simulator must show one of four states that each current process is in: new, ready, running, or exiting. Part of the management process for holding this data includes a requirement to create a PCB for each process provided in the previous phase. There is no specific requirement for what is to be stored in each PCB but the data it holds must be specifically pertinent to the process it represents. for the memory management, the following specifications must be followed:
- the total memory authorized for a given process will be placed in the configuration file, as previously specified. Up to 100 MB (102400 KB) may be specified in the configuration file
- the process will allocate a segment of memory using the mem allocate, 3000, 4000 operation command provided previously. The first value is the memory base requested and the second value is the offset, which is also the quantity of memory requested, as described below
- The memory management processes are not that complicated in themselves, but they are too complicated to be presented in this document. See Cases 1 through 4 in the assignment information and check with the instructor if you have any questions.
- finally, the system must report at least each of the following operation actions: - system start and end
- any state change of any of the processes (e.g., ready, running, etc.) - any selection of a new process as a result of the scheduling requirement, along with the display of the time remaining for that process
- any start or end of any operation command (e.g., hard drive input or output, keyboard input, monitor output, run process actions, etc.); note that
the ends of all of the I/O operations will occur at times between other scheduled operations
- if there are questions on any of the above conditions, the example program provided is the reference
