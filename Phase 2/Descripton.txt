Phase 2 (Sim02) - Simple Multiple Program Batch Simulator
(Tentative – for reference)
DESCRIPTION
This phase will begin your real simulation work by processing several programs (processes) in one simulator run. The simulator must conduct all of the required operations of Sim01, and include the extensions of Sim02 specified here:
- the simulator program must create a Process Control Block data structure for each and every process. There are no specific requirements for PCB data structures other than every process must have a unique process ID. Other data quantities in the PCB are at the discretion of the programmer
- the simulator must manage, process, and display the simulation of multiple programs with multiple operation commands in a batch or sequential form. The number of programs or operation commands will not be known in advance.
- the simulator must output the simulation results a) to the monitor, b) to a file (without displaying to the monitor) with the name specified in the configuration file, or c) both; it is important to note again that the monitor display must occur as the operation commands occur in real time with the appropriate time quantities
o the selection of monitor, file, or both must be made in the configuration file
o in addition, the output to file operation must all be conducted at one point, after the simulation has been completed. This means that all the displayed operation statements with the times, process numbers, operation descriptions, etc. must be stored line by line until the simulation has finished, at which time the data is output to a file. The given program may be run to observe the structure of the logfile
o also, note that under the condition of outputting to the file only, the simulator will not respond for a while during the time the simulation is running. You must show some kind of indication that the simulation is running so the user won’t think the program has failed. You may display something like, “Simulator running for output to file only” but this display must only occur under that circumstance
- the simulator must be initially configured for First Come First Served – Non preemptive (FCFS-N). This means that if FCFS-N is shown in the configuration file, the simulator will progress through the processes in the order they were found in the meta-data file. At this point, any other scheduling algorithm must fail over to FCFS-N
- the simulator must show the time remaining when a process is placed into RUNNING mode; this will only happen once in this batch mode but will happen several times in Sim 04
- the simulator must show one of four states that the process is in: new, ready, running, or exiting
- the simulator must now use a POSIX thread to manage the cycle time for all I/O operations. This is not required for run operations; these may be run as normal functions or threads at the student’s discretion. It also does not apply to the memory management operations which may optionally run for a time as a place holder. These operations will be handled differently in future simulation projects.  Note that students are required to create their own timer threads; as mentioned previously in this document, no threads created in, or found in, available libraries, such as sleep, usleep, nanosleep, etc. may be used. For purposes of this assignment, the simulator does not support a multi-tasking (multi-programming) environment. For that reason, the simulator must still wait for each I/O operation to complete before moving on to the next operation command
- the system must report at least each of the following operation actions: - system start and end
- any state change of any of the processes (e.g., ready, running, etc.) - any start or end of any operation command (e.g., hard drive input or output, keyboard input, monitor output, run process actions, etc.)
An example config, metadata, and output file will be provided in BBLearn.  However, all programs should be tested with a variety of metadata files, at least five to ten of them.
